<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 标签的顺序是固定的，不允许改变 -->
	<!--
		mybatis可以使用properties来引入外部properties配置文件的内容；
		resource：引入类路径下的资源
		url：引入网络路径或者磁盘路径下的资源
	  -->
	<properties resource="db-config.properties"></properties>
	
	<!-- 
		2、settings包含很多重要的设置项
			setting:用来设置每一个设置项
			name：设置项名(参考文档）
			value：设置项取值
	 -->

	<settings>
		<!-- 
			该设置项启用了驼峰命名法，方便于数据库列名到java字段名进行映射：
				数据库(last_name) -> java字段名(lastName)
		 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		<!-- 该设置规定mybatis封装参数的map的key使用参数名（仅限jdk1.8以上版本） -->
		<setting name="useGeneratedKeys" value="true"/>
		<!-- 开启二级缓存 -->
		<setting name="cacheEnabled" value="true"/>
		<!-- 
			在我们传参的数据为null的时候，有些数据库可能不能识别mybatis对null的默认（默认值：OTHER）处理。比如Oracle（报错）；
			此时，这个设置可以修改mybatis对null映射到数据库的类型为NULL(而不是OTHER)，这样Oracle就能辨别NULL了（不支持OTHER）
		 -->
		<setting name="jdbcTypeForNull" value="NULL"/>
		<!-- 开启延迟加载 -->
		<setting name="lazyLoadingEnabled" value="true"/>
		<!-- 关闭全加载(开启按需加载) -->
		<setting name="aggressiveLazyLoading" value="false"/>
	</settings>
	
	<!-- 
		3、typeAliases：别名处理器：可以为我们的java类型起别名 
		别名不区分大小写
	-->
	<!-- 
		mybatis为java基本数据类型及其包装类起了默认别名：
		int -> _int
		Integer -> integer
	 -->
	<typeAliases>
		<!-- typeAlias:为某个java类起别名
			 type:指定要起别名的类全类名;默认别名就是类名小写；employee
			 alias:指定新的别名
		 -->
		<!-- 可不指定alias属性，默认起别名为类名(小写)  -->
		<typeAlias type="com.beater.mybatis.bean.Employee" alias="emp"/>
		<!-- 批量为包下的所有类起别名(包括子包)，别名为默认值 ,批量起别名优先级低于单独起别名 -->
		<package name="com.beater.mybatis.bean"/>
		<!-- 批量起别名的情况下，也使用@Alias注解为某个类指定新的别名  -->
	</typeAliases>	
	
	<typeHandlers>
		<!--1、配置我们自定义的TypeHandler  -->
		<typeHandler handler="com.beater.mybatis.typehandler.MyEnumTypeHandler" javaType="com.beater.mybatis.bean.EmpStatus"/>
		<!--2、也可以在处理某个字段的时候告诉MyBatis用什么类型处理器
				保存：#{empStatus,typeHandler=xxxx}
				查询：
					<resultMap type="com.atguigu.mybatis.bean.Employee" id="MyEmp">
				 		<id column="id" property="id"/>
				 		<result column="empStatus" property="empStatus" typeHandler=""/>
				 	</resultMap>
				注意：如果在参数位置修改TypeHandler，应该保证保存数据和查询数据用的TypeHandler是一样的。
		  -->
	</typeHandlers>
	
	<plugins>
		<!--  
		<plugin interceptor="com.beater.mybatis.plugin.MyFirstPlugin">
			<property name="intercept" value="intercept"/>
			<property name="plugin" value="plugin"/>
		</plugin>
		-->
		<!-- com.github.pagehelper为PageHelper类所在包名 -->
	    <plugin interceptor="com.github.pagehelper.PageInterceptor">
	        <!-- 使用下面的方式配置参数，后面会有所有的参数介绍 -->
	        <!--  <property name="param1" value="value1"/> -->
		</plugin>
	</plugins>
	
	<!-- 
		4、environments：环境们，mybatis可以配置多种环境(比如：开发环境，测试环境)不同环境配置的事务管理器与数据源不一样 。
			default指定使用某种环境,。可以达到快速切换环境。
			environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
				transactionManager：事务管理器；
					type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
						自定义事务管理器：实现TransactionFactory接口.type指定为全类名
				
				dataSource：数据源;
					type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
								|POOLED(PooledDataSourceFactory)
								|JNDI(JndiDataSourceFactory)
					自定义数据源：实现DataSourceFactory接口，type是全类名
	-->	
	<environments default="dev_mysql">
	
		<environment id="test">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
			</dataSource>
		</environment>
		
		<environment id="dev_mysql">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
			<!--  	
				<property name="driver" value="com.mysql.jdbc.Driver" />
				<property name="url" value="jdbc:mysql://localhost:3306/mybatis" />
				<property name="username" value="root" />
				<property name="password" value="admin" />
			-->
				<property name="driver" value="${mysql.driver}" />
				<property name="url" value="${mysql.url}" />
				<property name="username" value="${mysql.username}" />
				<property name="password" value="${mysql.password}" />
			</dataSource>
		</environment>
		
		<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
		
	</environments>
	
	<!-- 
		5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	-->	
	<databaseIdProvider type="DB_VENDOR">
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQLServer" value="sqlServer"/>
	</databaseIdProvider>
	
	<!-- 将我们写好的sql映射文件（EmployeeDaoMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<mappers>
		<!-- 
			mapper:注册一个sql映射 
				注册配置文件
				resource：引用类路径下的sql映射文件
					com/beater/mybatis/dao/EmployeeDaoMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml
					
				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
		<!--
		  	<mapper resource="com/beater/mybatis/dao/EmployeeDaoMapper.xml" /> 
			<mapper class="com.beater.mybatis.dao.EmployeeDaoMapper"/>
			<mapper class="com.beater.mybatis.dao.EmployeeDaoMapperAnnotation"/>
		-->
		
		<!-- 批量注册 -->
		<package name="com.beater.mybatis.dao"/>
	</mappers>
	
</configuration>