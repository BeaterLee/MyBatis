<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beater.mybatis.dao.EmployeeDaoPlusMapper">
	
	<!--自定义某个javaBean的封装规则
	type：自定义规则的Java类型
	id:唯一id方便引用
	 -->
	<resultMap type="emp" id="empResultMap">
		<!-- id指定主键列的封装规则
				id定义主键会底层有优化；
				column：指定哪一列
				property：指定对应的javaBean属性
		 -->
		<id column="id" property="id"/>
		<!-- 
			result指定普通列的封装规则
			 其他不指定的列会自动封装：推荐：（我们只要写resultMap就把全部的映射规则都写上）
		 -->
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	</resultMap>
	<select id="getEmployeeByID" resultMap="empResultMap">
		select * from employee where id=#{id}
	</select>
	
	<!-- 
		场景一：
			查询Employee的同时查询员工对应的部门
			Employee===Department
			一个员工有与之对应的部门信息；
			id  last_name  gender email dept_id		dept_id dept_name (private Department department;)
	 -->	
	<!--
		联合查询：级联属性封装结果集
	-->
	
	<resultMap type="emp" id="empAndDeptResultMap">
		<id column="id" property="id"/>
		<result column="dept_id" property="department.id"/>
		<result column="dept_name" property="department.deptName"/>
	</resultMap>
	
	<!-- 
		使用association定义关联的单个对象的封装规则；
	-->
	<resultMap type="emp" id="empAndDeptAssociationResultMap">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!--  association可以指定联合的javaBean对象
				property="department"：指定哪个属性是联合对象的属性
				javaType:指定这个属性对象的类型[不能省略]
		-->	
		<association property="department" javaType="com.beater.mybatis.bean.Department">
			<id column="dept_id" property="id"/>
			<result column="dept_name" property="deptName"/>
		</association>
	</resultMap>
	
	<select id="getEmployeeAndDeptByID" resultMap="DiscriminatorResultMap">
		SELECT * FROM employee e,dept d WHERE e.dept_id = d.dept_id AND e.id = #{id}
	</select>
	
	<!-- 使用association进行分步查询：
			1、先按照员工id查询员工信息
			2、根据查询员工信息中的dept_id值去部门表查出部门信息
			3、部门设置到员工中；
	-->
	<resultMap type="emp" id="empAndDeptByStep">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	 	<!-- association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法
	 		
	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	-->
		<association property="department" select="com.beater.mybatis.dao.DepartmentDaoMapper.getDepartmentByID" column="dept_id">
		</association>
	</resultMap>
	
	<select id="getEmployeeByIDWithStep" resultMap="empAndDeptByStep">
		SELECT * FROM employee WHERE id = #{id}
	</select>
	<!-- 可以使用延迟加载（懒加载）；(按需加载)
	 		Employee==>Dept：
	 			我们每次查询Employee对象的时候，都将一起查询出来。
	 			部门信息在我们使用的时候再去查询；
	 			分段查询的基础之上在全局配置文件加上两个配置：lazyLoadingEnabled,aggressiveLazyLoading
	-->
	
	
	
	<!-- 
		场景二：
			查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentDaoMapper.xml中
	-->
	<select id="getEmployeeByDeptID" resultType="emp">
		select * from employee where dept_id = #{deptID}
	</select>
	
	<!-- =======================鉴别器============================ -->
	<!-- <discriminator javaType=""></discriminator>
		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出的是女生：就把部门信息查询出来，否则不查询；
			如果是男生，把last_name这一列的值赋值给email;
	-->
	<resultMap type="emp" id="DiscriminatorResultMap">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<discriminator javaType="string" column="gender">
			<case value="1" resultType="emp">
				<association property="department" javaType="com.beater.mybatis.bean.Department">
					<id column="dept_id" property="id"/>
					<result column="dept_name" property="deptName"/>
				</association>
			</case>
			<case value="0" resultType="emp">
				<result column="last_name" property="lastName"/>
				<result column="last_name" property="email"/>
			</case>
		</discriminator>
	</resultMap>
</mapper>