<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beater.mybatis.dao.DepartmentDaoMapper">
	<cache-ref namespace="com.beater.mybatis.dao.EmployeeDaoMapper"/>
	<select id="getDepartmentByID"
		resultType="com.beater.mybatis.bean.Department">
		select dept_id id,dept_name deptName from dept where dept_id = #{id}
	</select>

	<!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  -->
	<resultMap type="com.beater.mybatis.bean.Department" id="getDepartmentAndEmployeeListByIDResultMap">
		<id column="dept_id" property="id"/>
		<result column="dept_name" property="deptName"/>
		<!-- 
			collection定义关联集合类型的属性的封装规则 
			ofType:指定集合里面元素的类型
		-->
		<collection property="empList" ofType="emp">
			<!-- 定义这个集合中元素的封装规则 -->
			<id column="id" property="id"/>
			<result column="last_name" property="lastName"/>
			<result column="email" property="email"/>
			<result column="gender" property="gender"/>
			<association property="department" select="getDepartmentByID" column="dept_id">
			</association>
		</collection>
	</resultMap>
	
	<select id="getDepartmentAndEmployeeListByID" resultMap="getDepartmentAndEmployeeListByIDResultMap">
		SELECT
			*
		FROM
			dept
			LEFT JOIN employee ON dept.dept_id = employee.dept_id
		WHERE
			dept.dept_id = #{id}
	</select>
	<!-- collection：分段查询 -->
	<resultMap type="com.beater.mybatis.bean.Department" id="getDepartmentAndEmployeeListByIDByStepResultMap">
		<id column="dept_id" property="id"/>
		<result column="dept_name" property="deptName"/>
		<!-- column参数中传多列值{deptID=dept_id，...}-->
		<collection property="empList" select="com.beater.mybatis.dao.EmployeeDaoPlusMapper.getEmployeeByDeptID" column="dept_id">
		</collection>
	</resultMap>
	
	<select id="getDepartmentAndEmployeeListByIDByStep" resultMap="getDepartmentAndEmployeeListByIDByStepResultMap">
		select * from dept where dept_id = #{deptID}
	</select>
	
	<!-- 扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
			fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	-->
</mapper>